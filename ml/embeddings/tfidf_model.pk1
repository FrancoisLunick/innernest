from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import joblib
import string
import nltk
from nltk.corpus import stopwords

data = [
    ("I love this app", "positive"),
    ("I feel so lost and overwhelmed", "negative"),
    ("Today was very peaceful", "positive"),
    ("I'm just tired", "neutral")
]

nltk.download('stopwords')

def text_preprocessing():
    
    clean_sentences = []
    labels = []
    
    for (sentence, label) in data:
        
        sentence = sentence.lower()
        translator = str.maketrans('', '', string.punctuation)
        
        clean_sentence = sentence.translate(translator)
        
        words = clean_sentence.split()
        
        eng_stopwords = set(stopwords.words('english'))
        
        filtered_words = [word for word in words if word not in eng_stopwords]
        
        clean_sentences.append((" ".join(filtered_words)))
        labels.append(label)
    
    return (clean_sentences, labels)

def encode_and_train():
    
    X, y = text_preprocessing()
    
    print(X)
    print(y)
    
    le = LabelEncoder()
    encoded_labels = le.fit_transform(y)
    
    X_train, X_test, y_train, y_test = train_test_split(x, encoded_labels, test_size=0.2, random_state=42)
    
    print(encoded_labels)
    
        
        
encode_and_train()